{"pages":[{"title":"","text":"","link":"/categories/index.html"}],"posts":[{"title":"Cookie和Session","text":"Cookie和Session的联系和区别 cookie 是一种发送到客户浏览器的文本串句柄，并保存在客户机硬盘上，可以用来在某个WEB站点会话间持久的保持数据。 session其实指的就是访问者从到达某个特定主页到离开为止的那段时间。 Session其实是利用Cookie进行信息处理的，当用户首先进行了请求后，服务端就在用户浏览器上创建了一个Cookie，当这个Session结束时，其实就是意味着这个Cookie就过期了。 注：为这个用户创建的Cookie的名称是aspsessionid。这个Cookie的唯一目的就是为每一个用户提供不同的身份认证。 cookie和session的共同之处在于：cookie和session都是用来跟踪浏览器用户身份的会话方式。 cookie 和session的区别是：cookie数据保存在客户端，session数据保存在服务器端。 如果web服务器端使用的是session，那么所有的数据都保存在服务器上，客户端每次请求服务器的时候会发送当前会话的sessionid，服务器根据当前sessionid判断相应的用户数据标志，以确定用户是否登录或具有某种权限。由于数据是存储在服务器上面，所以你不能伪造，但是如果你能够获取某个登录用户的 sessionid，用特殊的浏览器伪造该用户的请求也是能够成功的。sessionid是服务器和客户端链接时候随机分配的，一般来说是不会有重复，但如果有大量的并发请求，也不是没有重复的可能性. 如果浏览器使用的是cookie，那么所有的数据都保存在浏览器端，比如你登录以后，服务器设置了cookie用户名，那么当你再次请求服务器的时候，浏览器会将用户名一块发送给服务器，这些变量有一定的特殊标记。服务器会解释为cookie变量，所以只要不关闭浏览器，那么cookie变量一直是有效的，所以能够保证长时间不掉线。如果你能够截获某个用户的 cookie变量，然后伪造一个数据包发送过去，那么服务器还是认为你是合法的。所以，使用 cookie被攻击的可能性比较大。如果设置了的有效时间，那么它会将 cookie保存在客户端的硬盘上，下次再访问该网站的时候，浏览器先检查有没有 cookie，如果有的话，就读取该 cookie，然后发送给服务器。如果你在机器上面保存了某个论坛 cookie，有效期是一年，如果有人入侵你的机器，将你的 cookie拷走，然后放在他的浏览器的目录下面，那么他登录该网站的时候就是用你的的身份登录的。所以 cookie是可以伪造的。当然，伪造的时候需要主意，直接copy cookie文件到 cookie目录，浏览器是不认的，他有一个index.dat文件，存储了 cookie文件的建立时间，以及是否有修改，所以你必须先要有该网站的 cookie文件，并且要从保证时间上骗过浏览器。 两个都可以用来存私密的东西，同样也都有有效期的说法,区别在于session是放在服务器上的，过期与否取决于服务期的设定，cookie是存在客户端的，过去与否可以在cookie生成的时候设置进去。(1)cookie数据存放在客户的浏览器上，session数据放在服务器上(2)cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗,如果主要考虑到安全应当使用session(3)session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，如果主要考虑到减轻服务器性能方面，应当使用COOKIE(4)单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能3K。(5)所以：将登陆信息等重要信息存放为SESSION;其他信息如果需要保留，可以放在COOKIE中。 问：为什么第一次访问的时候，会没有cookie呢？？我不是先设置，再获取吗？答：使用Chrome的dev tools查看“网络” 客户端： 可以看到，浏览器（客户端）向服务器发出一次请求，发出请求的时候，在请求头信息中带上了各种参数，告诉服务器，我要接收什么样的文本（Accept）、什么编码格式（Accept-Encoding）、什么语言（Accept-Language）等等，当然，还把Cookie也传到了服务器（Cookie）。 服务器端： 第一步：setcookie(‘a’,’value’) 因为cookie是设置在客户端的，setcookie函数自己并不能设置cookie，它只能通过头信息的方式告诉浏览器说：兄弟，我要设置一个cookie，键为a，值为value，你在你那里帮我设置一下。你也可以理解为：”来，朕今天高兴，赏你一个小甜饼“。 第二步：$_COOKIE[‘a’]$_COOKIE[‘a’] 很简单，执行的操作就是在浏览器带过来的cookie字符串中搜索键为a的cookie，并返回它的值。 很明显，这个”键为a“的cookie不可能找到，因为客户端访问服务器的时候，这个cookie压根就不存在，而前面第一步设置cookie的头信息，也还没有返回给客户端（php要从上到下把语句执行完才会返回给客户端） 第三步：服务器返回信息 其中，返回的头信息中带有”Set-Cookie a=value“，浏览器收到这个头信息，把cookie存放到电脑的某个文件中，对于不同浏览器cookie的存放位置貌似不同，这个不在本文的范围。 刷新浏览器，再次访问服务器的时候，同样，也会把很多头信息带给服务器，只不过这次带过去的cookie中，就多了一个a=value了。$_COOKIE[‘a’]自然就能从cookie字符串中找到这个键为a的cookie的值。","link":"/2020/06/30/cookie-session/"},{"title":"Best wishes to you","text":"Hello,终于等到你！欢迎来到我的私人博客，在这里，我主要记录一些学习心得，当然，也会记录日常十分有意义的事情。人生苦短，进一步有进一步的欢喜。 使用HEXO框架搭建博客搭建过程1、需要安装node.js(含node 和 npm)2、安装hexo(来自一名台湾小伙) 1npm install hexo-cli -g 3、初始化博客目录 1hexo init lihui91.github.io (必须是这种格式) 4、进入该目录 1cd lihui91.github.io 5、连续常规操作 123hexo clean (清除缓存)hexo g (generator)hexo s (server||start) 6、打开自己的浏览器，输入localhost:4000(默认是4000端口) 切换主题这里有许多现成的主题，美轮美奂：hexo主题 1、选一个自己中意的主题，然后下载到本地 1git clone https://github.com/iissnan/hexo-theme-next themes/next 2、配置主题：在根目录下的 _config.yml文件中，修改theme为自己的主题 1theme:next 3、重新一遍连续常规操作 123hexo clean (清除缓存)hexo g (generator)hexo s (server||start) 4、再次打开网站看看修改效果 远端部署部署到同性交友网站github1、创建github pages仓库(lihui91.github.io)2、安装hexo-deployer-git 1npm install hexo-deployer-git --save 3、配置Git打开配置文件 123deploy: type: git repo: https://github.com/xxx/xxxx.github.io.git(仓库SSH链接) 4、推送网站到仓库托管 1hexo -d (deploy-部署) 5、访问网站 随便找台有浏览器的电脑，输入lihui91.github.io 推送文章1、两种方式新建博文 1.在blog根目录下使用如下命令:hexo new article(article为文章名)2.直接新建 2、给文章打上标签打开标签功能： 1hexo new page tags 将tags/index.md头部内容修改为： 12type: \"tags\" comments:false 在文章头部打上标签 1234tags: - tag1 - tag2 - tag3 3、给文章添加分类打开分类功能： 1hexo new page categories 打开categories/index.md，进行修改： 12type: \"categories\" comments: false 在文章头部添加分类 1234categories: - 分类1 - 分类2 - 分类3 进一步完善自己的网站 一些可能会用到的链接hexo及icarus主题个性定制Hexo Icarus主题配置完全手册live2d 参考网址：hexo搭建个人网站博客完全教程","link":"/2020/06/29/BestWishes/"},{"title":"fav-pic","text":"Some pictures I enjoy. continue…","link":"/2020/06/30/fav-pic/"},{"title":"Git_Begin","text":"Git 基础知识安装编辑器和浏览器对于编辑器来说，每个人都有不同的偏好，你可以自由选择。可以选择功能丰富的IDE（集成开发环境），比如 PyCharm；也可以选择相对轻量的编辑器，比如 Atom 或 Sublime Text。浏览器建议使用 Firefox 或 Chrome。 使用命令行你需要使用命令行窗口来执行许多操作。你可以使用 Windows 下的 cmd.exe，或是 macOS 和 Linux 下的终端（Terminal）。下面我们执行一个最简单的 whoami 命令（即 Who Am I？）： 12$ whoamilihui 这个命令会打印出当前计算机用户的名称。其他常用的命令还有 cd 命令，用来切换目录（change directory）；mkdir 命令，用来创建目录（make directory）。在不同的操作系统上，执行某个操作的命令可能会有所不同。 我们先来为我们的程序创建一个文件夹： 12$ mkdir watchlist$ cd watchlist 对于 Windows（非 WSL） 用户，如果你对不同系统下终端命令的区别不熟悉，那么建议在使用 Git Bash（安装 Git for Windows 后附带的终端程序） 来代替系统自带的 cmd.exe 或 Powershell。Git Bash 支持一些在 Linux 或 macOS 下才能使用的命令（程序），比如 ls、cat、nano、ssh 等。 需要注意下列命令的区别： 在 cmd.exe 中使用 dir 命令替代 ls 命令，使用 type 命令替代 cat 命令 对于 nano 命令，你可以替换为其他已安装的编辑器命令，比如对于 VS Code，可以使用 code 命令。或者，你也可以直接使用编辑器的图形界面创建文件并编辑。 使用 GitGit 是一个流行的版本控制工具，我们可以用它来记录程序源码和文件的变动情况，或是在编程时进行多人协作，你可以把它看做一个优雅的代码变动备份工具。 如果你还不熟悉 Git 也没关系，有时间再去了解原理。现在要做的第一件事就是在你的电脑上安装 Git （可以执行 git --help 命令检查是否已经安装，没有提示“命令未找到（Command not found）”则表示已安装）。 安装后可以在命令行先使用使用下面的命令查看版本，没有报错则表示已正确安装： 12$ git --versiongit version 2.17.1 为了让 Git 知道你是谁，以便在提交代码到版本仓库的时候进行记录，使用下面的命令设置你的信息： 12$ git config --global user.name \"lihui\" # 替换成你的名字$ git config --global user.email \"lih7253@gmail.com\" # 替换成你的邮箱地址 现在为我们的项目文件夹创建一个 Git 仓库，这会在我们的项目根目录创建一个 .git 文件夹： 12$ git initInitialized empty Git repository in ~/watchlist/.git/ Git 默认会追踪项目文件夹（或者说代码仓库）里所有文件的变化，但是有些无关紧要的文件不需要记录变化，我们在项目根目录创建一个 .gitignore 文件，在文件中写入忽略文件的规则。因为文件内容比较简单，我们直接在命令行使用 nano 来创建： 1$ nano .gitignore 在 nano 编辑界面写入常见的可忽略文件规则： 1234*.pyc*~__pycache__.DS_Store 使用 Control + O 和 Enter 键保存，然后按下 Control + X 键退出。在后续章节，对于简单的文件，都会使用 nano 创建，这部分操作你也可以使用编辑器图形界面来完成。 将程序托管到 GitHub（可选）这一步是可选的，将程序托管到 GitHub、GitLab 或是 BitBucket 等平台上，可以更方便的备份、协作和部署。这些托管平台作为 Git 服务器，你可以为本地仓库创建远程仓库。 首先要注册一个 GitHub 账户，点击访问注册页面，根据指示完成注册流程。登录备用。 设置 SSH 密钥一般情况下，当推送本地改动到远程仓库时，需要输入用户名和密码。因为传输通常是通过 SSH 加密，所以可以通过设置 SSH 密钥来省去验证账号的步骤。 首先使用下面的命令检查是否已经创建了 SSH 密钥： 1$ cat ~/.ssh/id_rsa.pub 如果显示“No such file or directory”，就使用下面的命令生成 SSH 密钥对，否则复制输出的值备用： 1$ ssh-keygen 一路按下 Enter 采用默认值，最后会在用户根目录创建一个 .ssh 文件夹，其中包含两个文件，id_rsa 和 id_rsa.pub，前者是私钥，不能泄露出去，后者是公钥，用于认证身份，就是我们要保存到 GitHub 上的密钥值。再次使用前面提到的命令获得文件内容： 12$ cat ~/.ssh/id_rsa.pubssh-rsa AAAAB3Nza...省略 N 个字符...3aph book@lihui 选中并复制输出的内容，访问 GitHub 的 SSH 设置页面（导航栏头像 - Settings - SSH and GPG keys），点击 New SSH key 按钮，将复制的内容粘贴到 Key 输入框里，再填一个标题，比如“My PC”，最后点击“Add SSH key”按钮保存。 创建远程仓库访问新建仓库页面（导航栏“+” - New repository），在“Repository name”处填写仓库名称，这里填“watchlist”即可，接着选择仓库类型（公开或私有）等选项，最后点击“Create repository”按钮创建仓库。 因为我们已经提前创建了本地仓库，所以需要指定仓库的远程仓库地址（如果还没有创建，则可以直接将远程仓库克隆到本地）： 1$ git remote add origin git@github.com:lihui91/watchlist.git # 注意更换地址中的用户名 这会为本地仓库关联一个名为“origin”的远程仓库，注意将仓库地址中的“lihui”换成你的 GitHub 用户名。","link":"/2020/06/29/Git-Begin/"},{"title":"搭建php环境","text":"如何搭建PHP环境PHP是世界上最好的语言，但这句话最早来自于PHP公司自己，有点王婆卖瓜，自卖自夸的味道，但一旦用到PHP，就会觉得”嗯，PHP真香！”。PHP广泛应用到网站服务端上，虽然现在很多崭新的语言如雨后春笋，但PHP仍然占据很重要的席位。 我搭建的服务端体系基于PHP+Apache+Mysql结构 Windows下PHP环境搭建 安装PHP 安装Apache 安装MySQL(可视化界面要安装navicat) 注：最好安装在根目录下，便于管理 配置Apache 打开conf文件夹，打开httpd.conf，进行路径修改Define SRVROOT “D:/Apache24”ServerRoot “${SRVROOT}”进行端口修改Listen 8080 Cmd(管理员权限下）Httpd -k -startNetstat -ano|fidstr “8080” 查看端口占用情况Tasklist|fidstr “****” 查看程序占用情况若端口被占用，再次进行端口修改 详细配置情况：windows下PHP环境的搭建搭建PHP开发环境（Apache+PHP+MySQL） 端口运行在Htdocs文件夹中新建phpinfo.php文件里面写入一些内容： 成功运行，显示php version详细信息 集成环境安装优点：省时省力，不费心神WAMPserver(好用，下载安装即可，操作比较无脑)","link":"/2020/06/28/create-php-env/"}],"tags":[{"name":"web","slug":"web","link":"/tags/web/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"笔记","slug":"笔记","link":"/tags/%E7%AC%94%E8%AE%B0/"},{"name":"好图","slug":"好图","link":"/tags/%E5%A5%BD%E5%9B%BE/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"服务端","slug":"服务端","link":"/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"}],"categories":[{"name":"笔记","slug":"笔记","link":"/categories/%E7%AC%94%E8%AE%B0/"},{"name":"diary","slug":"diary","link":"/categories/diary/"}]}